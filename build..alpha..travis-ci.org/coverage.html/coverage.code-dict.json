{"/home/travis/build/npmtest/node-npmtest-feed/test.js":"/* istanbul instrument in package npmtest_feed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feed/lib.npmtest_feed.js":"/* istanbul instrument in package npmtest_feed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_feed = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_feed = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-feed/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-feed && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_feed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_feed\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_feed.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_feed.rollup.js'] =\n            local.assetsDict['/assets.npmtest_feed.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_feed.__dirname + '/lib.npmtest_feed.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-feed/node_modules/feed/lib/feed.js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _xml = require('xml');\n\nvar _xml2 = _interopRequireDefault(_xml);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar GENERATOR = 'Feed for Node.js';\nvar DOCTYPE = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n\nvar Feed = function () {\n  function Feed(options) {\n    _classCallCheck(this, Feed);\n\n    this.options = options;\n    this.items = [];\n    this.categories = [];\n    this.contributors = [];\n  }\n\n  _createClass(Feed, [{\n    key: 'addItem',\n    value: function addItem(item) {\n      this.items.push(item);\n    }\n  }, {\n    key: 'addCategory',\n    value: function addCategory(category) {\n      this.categories.push(category);\n    }\n  }, {\n    key: 'addContributor',\n    value: function addContributor(contributor) {\n      this.contributors.push(contributor);\n    }\n  }, {\n    key: 'render',\n    value: function render(format) {\n      console.warn('DEPRECATED: use atom1() or rss2() instead of render()');\n      if (format === 'atom-1.0') {\n        return this.atom1();\n      } else {\n        return this.rss2();\n      }\n    }\n  }, {\n    key: 'atom1',\n    value: function atom1() {\n      var _this = this;\n\n      var options = this.options;\n\n\n      var feed = [{ _attr: { xmlns: 'http://www.w3.org/2005/Atom' } }, { id: options.id }, { title: options.title }, { updated: options.updated ? this.ISODateString(options.updated) : this.ISODateString(new Date()) }, { generator: GENERATOR }];\n\n      var root = [{ feed: feed }];\n\n      if (options.author) {\n        var _options$author = options.author,\n            name = _options$author.name,\n            email = _options$author.email,\n            link = _options$author.link;\n\n        var author = [];\n\n        if (name) {\n          author.push({ name: name });\n        }\n\n        if (email) {\n          author.push({ email: email });\n        }\n\n        if (link) {\n          author.push({ uri: link });\n        }\n\n        feed.push({ author: author });\n      }\n\n      // link (rel=\"alternate\")\n      if (options.link) {\n        feed.push({ link: { _attr: { rel: 'alternate', href: options.link } } });\n      }\n\n      // link (rel=\"self\")\n      if (options.feed) {\n        feed.push({ \"link\": { _attr: { rel: 'self', href: options.feed } } });\n      }\n\n      // link (rel=\"hub\")\n      if (options.hub) {\n        feed.push({ link: { _attr: { rel: 'hub', href: options.hub } } });\n      }\n\n      /**************************************************************************\n       * \"feed\" node: optional elements\n       *************************************************************************/\n\n      if (options.description) {\n        feed.push({ subtitle: options.description });\n      }\n\n      if (options.image) {\n        feed.push({ logo: options.image });\n      }\n\n      if (options.copyright) {\n        feed.push({ rights: options.copyright });\n      }\n\n      this.categories.forEach(function (category) {\n        feed.push({ category: [{ _attr: { term: category } }] });\n      });\n\n      this.contributors.forEach(function (item) {\n        var name = item.name,\n            email = item.email,\n            link = item.link;\n\n        var contributor = [];\n\n        if (name) {\n          contributor.push({ name: name });\n        }\n\n        if (email) {\n          contributor.push({ email: email });\n        }\n\n        if (link) {\n          contributor.push({ uri: link });\n        }\n\n        feed.push({ contributor: contributor });\n      });\n\n      // icon\n\n      /**************************************************************************\n       * \"entry\" nodes\n       *************************************************************************/\n      this.items.forEach(function (item) {\n        // \n        // entry: required elements\n        // \n\n        var entry = [{ title: { _attr: { type: 'html' }, _cdata: item.title } }, { id: item.id || item.link }, { link: [{ _attr: { href: item.link } }] }, { updated: _this.ISODateString(item.date) }];\n\n        // \n        // entry: recommended elements\n        // \n        if (item.description) {\n          entry.push({ summary: { _attr: { type: 'html' }, _cdata: item.description } });\n        }\n\n        if (item.content) {\n          entry.push({ content: { _attr: { type: 'html' }, _cdata: item.content } });\n        }\n\n        // entry author(s)\n        if (Array.isArray(item.author)) {\n          item.author.forEach(function (oneAuthor) {\n            var name = oneAuthor.name,\n                email = oneAuthor.email,\n                link = oneAuthor.link;\n\n            var author = [];\n\n            if (name) {\n              author.push({ name: name });\n            }\n\n            if (email) {\n              author.push({ email: email });\n            }\n\n            if (link) {\n              author.push({ uri: link });\n            }\n\n            entry.push({ author: author });\n          });\n        }\n\n        // content\n\n        // link - relative link to article\n\n        //\n        // entry: optional elements\n        // \n\n        // category\n\n        // contributor\n        if (Array.isArray(item.contributor)) {\n          item.contributor.forEach(function (item) {\n            var name = item.name,\n                email = item.email,\n                link = item.link;\n\n            var contributor = [];\n\n            if (name) {\n              contributor.push({ name: name });\n            }\n\n            if (email) {\n              contributor.push({ email: email });\n            }\n\n            if (link) {\n              contributor.push({ uri: link });\n            }\n\n            entry.push({ contributor: contributor });\n          });\n        }\n\n        // published\n        if (item.published) {\n          entry.push({ published: _this.ISODateString(item.published) });\n        }\n\n        // source\n\n        // rights\n        if (item.copyright) {\n          entry.push({ rights: item.copyright });\n        }\n\n        feed.push({ entry: entry });\n      });\n\n      return DOCTYPE + (0, _xml2.default)(root, true);\n    }\n  }, {\n    key: 'rss2',\n    value: function rss2() {\n      var options = this.options;\n\n      var isAtom = false;\n      var isContent = false;\n\n      var channel = [{ title: options.title }, { link: options.link }, { description: options.description }, { lastBuildDate: options.updated ? options.updated.toUTCString() : new Date().toUTCString() }, { docs: 'http://blogs.law.harvard.edu/tech/rss' }, { generator: GENERATOR }];\n\n      var rss = [{ _attr: { version: '2.0' } }, { channel: channel }];\n\n      var root = [{ rss: rss }];\n\n      /**\n       * Channel Image\n       * http://cyber.law.harvard.edu/rss/rss.html#ltimagegtSubelementOfLtchannelgt\n       */\n      if (options.image) {\n        channel.push({\n          image: [{ title: options.title }, { url: options.image }, { link: options.link }]\n        });\n      }\n\n      /**\n       * Channel Copyright\n       * http://cyber.law.harvard.edu/rss/rss.html#optionalChannelElements\n       */\n      if (options.copyright) {\n        channel.push({ copyright: options.copyright });\n      }\n\n      /**\n       * Channel Categories\n       * http://cyber.law.harvard.edu/rss/rss.html#comments\n       */\n      this.categories.forEach(function (category) {\n        channel.push({ category: category });\n      });\n\n      /**\n       * Feed URL\n       * http://validator.w3.org/feed/docs/warning/MissingAtomSelfLink.html\n       */\n      if (options.feed) {\n        isAtom = true;\n\n        channel.push({\n          \"atom:link\": {\n            _attr: {\n              href: options.feed,\n              rel: 'self',\n              type: 'application/rss+xml'\n            }\n          }\n        });\n      }\n\n      /**\n       * Hub for PubSubHubbub\n       * https://code.google.com/p/pubsubhubbub/\n       */\n      if (options.hub) {\n        isAtom = true;\n        channel.push({\n          \"atom:link\": {\n            _attr: {\n              href: options.hub,\n              rel: 'hub'\n            }\n          }\n        });\n      }\n\n      /**\n       * Channel Categories\n       * http://cyber.law.harvard.edu/rss/rss.html#hrelementsOfLtitemgt\n       */\n      this.items.forEach(function (entry) {\n        var item = [];\n\n        if (entry.title) {\n          item.push({ title: { _cdata: entry.title } });\n        }\n\n        if (entry.link) {\n          item.push({ link: entry.link });\n        }\n\n        if (entry.guid) {\n          item.push({ guid: entry.guid });\n        } else if (entry.link) {\n          item.push({ guid: entry.link });\n        }\n\n        if (entry.date) {\n          item.push({ pubDate: entry.date.toUTCString() });\n        }\n\n        if (entry.description) {\n          item.push({ description: { _cdata: entry.description } });\n        }\n\n        if (entry.content) {\n          isContent = true;\n          item.push({ 'content:encoded': { _cdata: entry.content } });\n        }\n        /**\n         * Item Author\n         * http://cyber.law.harvard.edu/rss/rss.html#ltauthorgtSubelementOfLtitemgt\n         */\n        if (Array.isArray(entry.author)) {\n          entry.author.some(function (author) {\n            if (author.email && author.name) {\n              item.push({ author: author.email + ' (' + author.name + ')' });\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n\n        if (item.image) {\n          item.push({ enclosure: [{ _attr: { url: entry.image } }] });\n        }\n\n        channel.push({ item: item });\n      });\n\n      if (isContent) {\n        rss[0]._attr['xmlns:content'] = 'http://purl.org/rss/1.0/modules/content/';\n      }\n\n      if (isAtom) {\n        rss[0]._attr['xmlns:atom'] = 'http://www.w3.org/2005/Atom';\n      }\n\n      return DOCTYPE + (0, _xml2.default)(root, true);\n    }\n  }, {\n    key: 'ISODateString',\n    value: function ISODateString(d) {\n      function pad(n) {\n        return n < 10 ? '0' + n : n;\n      }\n\n      return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + 'Z';\n    }\n  }]);\n\n  return Feed;\n}();\n\nmodule.exports = Feed;\n//# sourceMappingURL=feed.js.map","/home/travis/build/npmtest/node-npmtest-feed/node_modules/feed/src/feed.js":"import xml from 'xml'\n\nconst GENERATOR = 'Feed for Node.js'\nconst DOCTYPE = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n\nclass Feed {\n\n  constructor(options) {\n    this.options = options\n    this.items = []\n    this.categories = []\n    this.contributors = []\n  }\n\n  addItem(item) {\n    this.items.push(item)\n  }\n\n  addCategory(category) {\n    this.categories.push(category)\n  }\n\n  addContributor(contributor) {\n    this.contributors.push(contributor)\n  }\n\n  render(format) {\n    console.warn('DEPRECATED: use atom1() or rss2() instead of render()');\n    if (format === 'atom-1.0') {\n      return this.atom1();\n    } else {\n      return this.rss2();\n    }\n  }\n\n  atom1() {\n    const { options } = this\n\n    let feed = [\n      { _attr: { xmlns: 'http://www.w3.org/2005/Atom' } },\n      { id: options.id },\n      { title: options.title },\n      { updated: (options.updated ? this.ISODateString(options.updated) : this.ISODateString(new Date())) },\n      { generator: GENERATOR },\n    ]\n\n    let root = [{ feed }]\n\n    if (options.author) {\n      const { name, email, link } = options.author\n      let author = []\n\n      if (name) {\n        author.push({ name });\n      }\n\n      if (email) {\n        author.push({ email });\n      }\n\n      if (link) {\n        author.push({ uri: link });\n      }\n\n      feed.push({ author })\n    }\n\n    // link (rel=\"alternate\")\n    if(options.link) {\n      feed.push({ link: { _attr: { rel: 'alternate', href: options.link }}});\n    }\n\n    // link (rel=\"self\")\n    if(options.feed) {\n      feed.push({ \"link\": { _attr: { rel: 'self', href: options.feed }}});\n    }\n\n    // link (rel=\"hub\")\n    if(options.hub) {\n      feed.push({ link: { _attr: { rel:'hub', href: options.hub }}});\n    }\n\n    /**************************************************************************\n     * \"feed\" node: optional elements\n     *************************************************************************/\n    \n    if(options.description) {\n      feed.push({ subtitle: options.description });\n    }\n\n    if(options.image) {\n      feed.push({ logo: options.image });\n    }\n\n    if(options.copyright) {\n      feed.push({ rights: options.copyright });\n    }\n\n    this.categories.forEach(category => {\n      feed.push({ category: [{ _attr: { term: category } }] });\n    })\n      \n    this.contributors.forEach(item => {\n      const { name, email, link } = item\n      let contributor = [];\n  \n      if(name) {\n        contributor.push({ name });\n      }\n  \n      if(email) {\n        contributor.push({ email });\n      }\n  \n      if(link) {\n        contributor.push({ uri: link });\n      }\n\n      feed.push({ contributor });\n    })\n    \n    // icon\n\n    /**************************************************************************\n     * \"entry\" nodes\n     *************************************************************************/\n    this.items.forEach(item => {\n      // \n      // entry: required elements\n      // \n\n      let entry = [\n        { title: { _attr: { type: 'html' }, _cdata: item.title }},\n        { id: item.id || item.link },\n        { link: [{ _attr: { href: item.link } }]},\n        { updated: this.ISODateString(item.date) }\n      ]\n\n      // \n      // entry: recommended elements\n      // \n      if(item.description) {\n        entry.push({ summary: { _attr: { type: 'html' }, _cdata: item.description }});\n      }\n\n      if(item.content) {\n        entry.push({ content: { _attr: { type: 'html' }, _cdata: item.content }});\n      }\n\n      // entry author(s)\n      if(Array.isArray(item.author)) {\n        item.author.forEach(oneAuthor => {\n          const { name, email, link } = oneAuthor\n          let author = [];\n      \n          if(name) {\n            author.push({ name });\n          }\n      \n          if(email) {\n            author.push({ email });\n          }\n      \n          if(link) {\n            author.push({ uri: link });\n          }\n\n          entry.push({ author });\n        })\n      }\n\n      // content\n\n      // link - relative link to article\n\n      //\n      // entry: optional elements\n      // \n\n      // category\n\n      // contributor\n      if(Array.isArray(item.contributor)) {\n        item.contributor.forEach(item => {\n          const { name, email, link } = item\n          let contributor = [];\n      \n          if(name) {\n            contributor.push({ name });\n          }\n      \n          if(email) {\n            contributor.push({ email });\n          }\n      \n          if(link) {\n            contributor.push({ uri: link });\n          }\n      \n          entry.push({ contributor });\n        })\n      }\n\n      // published\n      if(item.published) {\n        entry.push({ published: this.ISODateString(item.published) });\n      }\n\n      // source\n\n      // rights\n      if(item.copyright) {\n        entry.push({ rights: item.copyright });\n      }\n\n      feed.push({ entry: entry });\n    })\n\n    return DOCTYPE + xml(root, true);       \n  }\n\n  rss2() {\n    const { options } = this\n    let isAtom = false\n    let isContent = false\n\n    let channel = [\n      { title: options.title },\n      { link: options.link },\n      { description: options.description },\n      { lastBuildDate: (options.updated ? options.updated.toUTCString() : new Date().toUTCString()) },\n      { docs: 'http://blogs.law.harvard.edu/tech/rss'},\n      { generator: GENERATOR },\n    ]\n\n    let rss = [\n      { _attr: { version: '2.0' } },\n      { channel },\n    ]\n\n    let root = [{ rss }]\n\n    /**\n     * Channel Image\n     * http://cyber.law.harvard.edu/rss/rss.html#ltimagegtSubelementOfLtchannelgt\n     */\n    if(options.image) {\n       channel.push({\n        image: [\n          { title: options.title },\n          { url: options.image },\n          { link: options.link },\n        ]\n      });\n     }\n\n    /**\n     * Channel Copyright\n     * http://cyber.law.harvard.edu/rss/rss.html#optionalChannelElements\n     */\n    if(options.copyright) {\n      channel.push({ copyright: options.copyright });\n    }\n    \n    /**\n     * Channel Categories\n     * http://cyber.law.harvard.edu/rss/rss.html#comments\n     */\n    this.categories.forEach(category => {\n      channel.push({ category });\n    })\n\n    /**\n     * Feed URL\n     * http://validator.w3.org/feed/docs/warning/MissingAtomSelfLink.html\n     */\n    if(options.feed) {\n      isAtom = true\n\n      channel.push({\n        \"atom:link\": {\n          _attr: {\n            href: options.feed,\n            rel: 'self',\n            type: 'application/rss+xml',\n          },\n        },\n      })\n    }\n    \n    /**\n     * Hub for PubSubHubbub\n     * https://code.google.com/p/pubsubhubbub/\n     */\n    if(options.hub) {\n      isAtom = true;\n      channel.push({\n        \"atom:link\": {\n          _attr: {\n            href: options.hub,\n            rel: 'hub',\n          },\n        },\n      })\n    }\n\n    /**\n     * Channel Categories\n     * http://cyber.law.harvard.edu/rss/rss.html#hrelementsOfLtitemgt\n     */\n    this.items.forEach(entry => {\n      let item = [];\n\n      if(entry.title) {\n        item.push({ title: { _cdata: entry.title }});\n      }\n\n      if(entry.link) {\n        item.push({ link: entry.link });\n      }\n\n      if(entry.guid) {\n        item.push({ guid: entry.guid });\n      } else if (entry.link) {\n        item.push({ guid: entry.link });\n      }\n\n      if(entry.date) {\n        item.push({ pubDate: entry.date.toUTCString() });\n      }\n\n      if(entry.description) {\n        item.push({ description: { _cdata: entry.description }});\n      }\n\n      if(entry.content) {\n        isContent = true;\n        item.push({ 'content:encoded': { _cdata: entry.content }});\n      }\n      /**\n       * Item Author\n       * http://cyber.law.harvard.edu/rss/rss.html#ltauthorgtSubelementOfLtitemgt\n       */\n      if(Array.isArray(entry.author)) {\n        entry.author.some(author => {\n          if (author.email && author.name) {\n            item.push({ author: author.email + ' (' + author.name + ')' })\n            return true\n          } else {\n            return false\n          }\n        })\n      }\n\n      if(item.image) {\n        item.push({ enclosure: [{ _attr: { url: entry.image } }] });\n      }\n\n      channel.push({ item });\n    })\n\n    if(isContent) {\n      rss[0]._attr['xmlns:content'] = 'http://purl.org/rss/1.0/modules/content/';\n    }\n\n    if(isAtom) {\n      rss[0]._attr['xmlns:atom'] = 'http://www.w3.org/2005/Atom';\n    }\n\n    return DOCTYPE + xml(root, true);\n  }\n\n  ISODateString(d) {\n    function pad(n) {\n      return n<10 ? '0'+n : n\n    }\n\n    return d.getUTCFullYear() + '-'\n      + pad(d.getUTCMonth() + 1) + '-'\n      + pad(d.getUTCDate()) + 'T'\n      + pad(d.getUTCHours()) + ':'\n      + pad(d.getUTCMinutes()) + ':'\n      + pad(d.getUTCSeconds()) + 'Z'\n  }\n\n}\n\nmodule.exports = Feed","/home/travis/build/npmtest/node-npmtest-feed/node_modules/feed/src/feed.spec.js":"import Feed from './feed'\n\nlet sampleDate = new Date('Sat, 13 Jul 2013 23:00:00 GMT');\n\nlet feed = new Feed({\n  title: 'Feed Title',\n  description: 'This is my personnal feed!',\n  link: 'http://example.com/',\n  id: 'http://example.com/',\n  feed: 'http://example.com/feed.rss',\n  image: 'http://example.com/image.png',\n  copyright: 'All rights reserved 2013, John Doe',\n  updated: sampleDate, // optional, default = today\n\n  author: {\n    name: 'John Doe',\n    email: 'johndoe@example.com',\n    link: 'https://example.com/johndoe'\n  }\n})\n\nfeed.addCategory('Technology')\n\nfeed.addContributor({\n  name: 'Johan Cruyff',\n  email: 'johancruyff@example.com',\n  link: 'https://example.com/johancruyff'\n})\n\nfeed.addItem({\n  title: 'Hello World',\n  id: 'https://example.com/hello-world',\n  link: 'https://example.com/hello-world',\n  description: 'This is an article about Hello World.',\n  author: [{\n    name: 'Jane Doe',\n    email: 'janedoe@example.com',\n    link: 'https://example.com/janedoe'\n  }, {\n    name: 'Joe Smith',\n    email: 'joesmith@example.com',\n    link: 'https://example.com/joesmith'\n  }],\n  contributor: [{\n    name: 'Shawn Kemp',\n    email: 'shawnkemp@example.com',\n    link: 'https://example.com/shawnkemp'\n  }, {\n    name: 'Reggie Miller',\n    email: 'reggiemiller@example.com',\n    link: 'https://example.com/reggiemiller'\n  }],\n  date: sampleDate,\n  image: 'https://example.com/hello-world.jpg'\n})\n\ntest('it should generate an RSS 2.0 feed', () => {\n  let expected = `<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n<rss version=\\\"2.0\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\">\n    <channel>\n        <title>Feed Title</title>\n        <link>http://example.com/</link>\n        <description>This is my personnal feed!</description>\n        <lastBuildDate>Sat, 13 Jul 2013 23:00:00 GMT</lastBuildDate>\n        <docs>http://blogs.law.harvard.edu/tech/rss</docs>\n        <generator>Feed for Node.js</generator>\n        <image>\n            <title>Feed Title</title>\n            <url>http://example.com/image.png</url>\n            <link>http://example.com/</link>\n        </image>\n        <copyright>All rights reserved 2013, John Doe</copyright>\n        <category>Technology</category>\n        <atom:link href=\\\"http://example.com/feed.rss\\\" rel=\\\"self\\\" type=\\\"application/rss+xml\\\"/>\n        <item>\n            <title><![CDATA[Hello World]]></title>\n            <link>https://example.com/hello-world</link>\n            <guid>https://example.com/hello-world</guid>\n            <pubDate>Sat, 13 Jul 2013 23:00:00 GMT</pubDate>\n            <description><![CDATA[This is an article about Hello World.]]></description>\n            <author>janedoe@example.com (Jane Doe)</author>\n        </item>\n    </channel>\n</rss>`;\n\n  let actual = feed.rss2()\n\n  expect(actual).toBe(expected)\n});\n\ntest('it should generate an Atom 1.0 feed', () => {\n  let expected = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n    <id>http://example.com/</id>\n    <title>Feed Title</title>\n    <updated>2013-07-13T23:00:00Z</updated>\n    <generator>Feed for Node.js</generator>\n    <author>\n        <name>John Doe</name>\n        <email>johndoe@example.com</email>\n        <uri>https://example.com/johndoe</uri>\n    </author>\n    <link rel=\"alternate\" href=\"http://example.com/\"/>\n    <link rel=\"self\" href=\"http://example.com/feed.rss\"/>\n    <subtitle>This is my personnal feed!</subtitle>\n    <logo>http://example.com/image.png</logo>\n    <rights>All rights reserved 2013, John Doe</rights>\n    <category term=\"Technology\">\n    </category>\n    <contributor>\n        <name>Johan Cruyff</name>\n        <email>johancruyff@example.com</email>\n        <uri>https://example.com/johancruyff</uri>\n    </contributor>\n    <entry>\n        <title type=\"html\"><![CDATA[Hello World]]></title>\n        <id>https://example.com/hello-world</id>\n        <link href=\"https://example.com/hello-world\">\n        </link>\n        <updated>2013-07-13T23:00:00Z</updated>\n        <summary type=\"html\"><![CDATA[This is an article about Hello World.]]></summary>\n        <author>\n            <name>Jane Doe</name>\n            <email>janedoe@example.com</email>\n            <uri>https://example.com/janedoe</uri>\n        </author>\n        <author>\n            <name>Joe Smith</name>\n            <email>joesmith@example.com</email>\n            <uri>https://example.com/joesmith</uri>\n        </author>\n        <contributor>\n            <name>Shawn Kemp</name>\n            <email>shawnkemp@example.com</email>\n            <uri>https://example.com/shawnkemp</uri>\n        </contributor>\n        <contributor>\n            <name>Reggie Miller</name>\n            <email>reggiemiller@example.com</email>\n            <uri>https://example.com/reggiemiller</uri>\n        </contributor>\n    </entry>\n</feed>`;\n\n  let actual = feed.atom1()\n\n  expect(actual).toBe(expected)\n});"}